from __future__ import annotations 
# __future__ -> 최신 문법 적용, annotations -> 타입 힌트의 순환 참조 문제를 해결하고, 런타임 성능을 개선하는 데 사용됨, 
# annotations 를 사용하면, 모든 타입 힌트가 런타임 시점에서 문자열로 저장된다. 이는 런타임 메모리 사용량을 줄이고, 성능을 향상 시켜준다.

from argparse import ArgumentParser 
# 프로그램에 필요한 인자를 사용자 친화적인 명령행 인터페이스로 쉽게 작성하도록 돕는 라이브러리
import base64 
# 파이썬 표준 라이브러리 중 하나로, Base64 인코딩과 디코딩을 수행하는 데 사용된다. Base64 는 바이너리 데이터를 텍스트로 인코딩하는 방법으로, 
# 바이너리 데이터를 문자 데이터로 안전하게 전송하거나 저장할 수 있도록 변환한다.
from collections import OrderedDict 
# 파이썬의 collections 모듈은 내장 자료형인 리스트, 튜플, 딕셔러니 등을 보완하거나 확장된 고급 자료형을 제공한다. 이 모듈은 데이터를 효율적으로 
# 관리하고 조작할 수 있도록 다양한 컨테이너 데이터 타입을 제공한다.
# OrderedDict -> key-value 쌍의 순서를 기억하는 딕셔너리이다. 파이썬 3.7 부터는 일반 딕셔너리도 입력 순서를 보장하지만, OrderedDict 는 특정 순서 기반 작업이 필요한 경우 유용하다.
from collections.abc import Callable
# collections.abs 는 리스트, 딕셔너리, 셋 등 컨테이너 타입이 반드시 구현해야 할 메서드와 속성을 정의합니다.
# Callable -> collections.abs 에 정의된 ABC 로, 호출 가능한(callable) 객체를 나타냅니다. 즉, 함수처럼 () 를 사용하여 호출할 수 있는 모든 객체를 포함합니다.
from io import BytesIO
# 파이썬의 io 모듈은 입출력 작업을 위한 다양한 도구를 제공합니다. 이 모듈은 파일 및 스트림을 다루는 데 사용되며, 텍사스와 바이너리 데이터를 읽고 쓸 수 있는 추상화된 계층을 제공한다.
# BytesIO 는 io 모듈에서 제공하는 클래스 중 하나로, 바이너리 데이터를 메모리 내에서 파일처럼 다룰 수 있게 합니다. 즉, 실제 파일이 아니라 메모리에 있는 바이너리 데이터에 대해 파일과 같은 읽기/쓰기 작업을 수행할 수 있다.
import os
# 파이썬의 os 모듈은 운영 체제와 상호작용을 위한 다양한 기능을 제공한다. 이 모듈은 파일 시스템 작업, 환경 변수 관리, 프로세스 관리 등 운영 체제와 관련된 작업을 수행할 수 있는 기능들을 제공한다.
from pathlib import Path, PurePath
# pathlib 모듈은 파일과 디렉토리 경로를 객체 지향적으로 다룰 수 있도록 설계된 모듈이다. 전통적인 문자열 기반 파일 경로 처리를 보다 직관적이고 안전하게 할 수 있는 방법을 제공한다.
# Path 클래스는 파일 시스템 경로를 다루기 위한 주요 클래스다. 이 클래스는 파일이나 디렉토리 경로를 생성, 조작, 확인하고 파일 시스템 작업(파일 생성, 읽기, 쓰기 등)을 수행할 수 있다.
# PurePath 클래스는 순수 경로 작업을 수행하는 클래스입니다. 파일 시스템에 접근하지 않고 경로를 문자열을 다룰 때 사용된다. 즉, 경로의 논리적 조작만들 위해 설계된 클래스다.
from threading import Lock
# 파이썬의 threading 모듈은 멀티쓰레딩(multi-threading)을 구현할 수 있도록 도와주는 모듈이다. 멀티쓰레딩은 하나의 프로그램에서 동시에 여러 작업을 수행할 수 있도록 하는 기능이다. 이 모듈은 병렬 작업을 관리하고 쓰레드 간 동기화를 처리하는 데 사용된다.
# Lock 클래스는 쓰레드 동기화를 위해 사용되는 기본 도구이다. 여러 쓰레드가 동시에 접근할 수 있는 공유 자원(예: 데이터 구조, 파일 등)에 대한 동시 접근을 방지하고, 하나의 쓰레드만 접근할 수 있도록 제어한다.
from typing import TYPE_CHECKING, Any, Literal
# typing 모듈은 타입 힌팅(Type Hinting)을 지원하는 파이썬 표준 라이브러리이다. 타입 힌팅은 코드에 데이터 유형을 명시하여, 코드의 가독성과 정확성을 높히고, 정적 분석 도구(예: mypy)가 코드의 타입 오류를 검출하는 데 도움을 준다.
# TYPE_CHECKING 은 조건부 타입 힌팅을 위해 사용된다. 런타임 시 타입 힌트 코드의 실행을 방지한다, 이를 통해 타입 힌트가 런타임에 불필요하게 실행되지 않도록 하고, 타입 검사 도구가 정적 타입 검사 시에만 이를 확인할 수 있도록 한다.
import zlib

from PIL import Image, ImageCms
from flask import Flask, Response, abort, make_response, render_template, url_for